#23.	Формируется матрица F следующим образом: скопировать в нее А и  если в Е сумма чисел, больших К в нечетных столбцах больше, чем произведение чисел по периметру, то поменять местами С и Е симметрично, иначе С и В поменять местами несимметрично. 
При этом матрица А не меняется. После чего если определитель матрицы А больше суммы диагональных элементов матрицы F, 
то вычисляется выражение: A*A-1 – K * F-1, иначе вычисляется выражение (AТ +G-FТ)*K, где G-нижняя треугольная матрица, полученная из А.  
Выводятся по мере формирования А, F и все матричные операции последовательно.

A= E B
   D C

import numpy as np
import matplotlib.pyplot as plt

K = int(input("Введите число K: "))
N = int(input("Введите число N: "))

A = np.zeros((2 * N, 2 * N), dtype=int)

A[:N, :N] = E = np.random.randint(-10, 10, (N, N))
A[:N, N:] = B = np.random.randint(-10, 10, (N, N))
A[N:, :N] = D = np.random.randint(-10, 10, (N, N))
A[N:, N:] = C = np.random.randint(-10, 10, (N, N))
print("Исходная матрица A:")
print(A)

fig, axes = plt.subplots(2, 2)
axes[0, 0].imshow(E, cmap='hot', vmin=-10, vmax=10)
axes[0, 0].set_title("Матрица E")
axes[0, 1].imshow(B, cmap='hot', vmin=-10, vmax=10)
axes[0, 1].set_title("Матрица B")
axes[1, 0].imshow(D, cmap='hot', vmin=-10, vmax=10)
axes[1, 0].set_title("Матрица D")
axes[1, 1].imshow(C, cmap='hot', vmin=-10, vmax=10)
axes[1, 1].set_title("Матрица C")
plt.tight_layout()
plt.show()

F = np.zeros((2 * N, 2 * N), dtype=int)

# Вычисление произведения чисел по периметру в матрице E
perimeter_product = np.prod(np.concatenate([E[0, :], E[-1, :], E[1:-1, -1], E[1:-1, 0]]))

odd_cols_sum = np.sum(E[:, 1::2][E[:, 1::2] > K])

if odd_cols_sum > perimeter_product:
    F[:N, :N] = C
    F[N:, N:] = E
else:
    F[:N, N:] = B
    F[N:, :N] = D
print("Конечная матрица F:")
print(F)

det_A = np.linalg.det(A)
sum_diag_F = np.sum(np.diag(F))

if det_A > sum_diag_F:
    expression = np.matmul(A, np.linalg.inv(A)) - K * np.linalg.inv(F)
else:
    G = np.tril(A)
    expression = (np.transpose(A) + G - np.transpose(F)) * K

print("Результат выражения:")
print(expression)
print("Произведение -", perimeter_product)
print("Сумма -", odd_cols_sum)

